{"version":3,"sources":["components/ActionButton.tsx","assets/dice1.jpg","assets/dice2.jpg","assets/dice3.jpg","assets/dice4.jpg","assets/dice5.jpg","assets/dice6.jpg","components/Dice.tsx","components/Modal.tsx","components/Rules.tsx","components/ScoreCard.tsx","helpers/CheckResults.tsx","App.tsx","helpers/Scroll.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionButton","handleClick","value","icon","disabled","bgSuccess","id","className","onClick","Dice","iKey","rollCount","pinPositions","onDiceClick","diceIcons","D1","D2","D3","D4","D5","D6","src","alt","Modal","show","currentPlayer","closeModal","playerId","role","type","WinnerModal","results","winner","indexOf","Math","max","map","key","Rules","href","ScoreCard","scores","categories","useState","setPlayerId","showLoading","setShowLoading","rules","useEffect","val","setTimeout","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","record","reduce","acc","curr","getSumOfAllDices","dices","checkIfRepeatCountAchieved","repeats","filter","dice","length","getWinnerId","App","pause","setPause","setResults","setRollCount","showModal","setShowModal","setDices","setCurrentPlayer","usedCategories","setUsedCategories","showWinnerModal","setShowWinnerModal","setScores","setPinPositions","categoryTitles","switchToNextRound","handleCategorySelect","target","tmp","categoryNr","tmpUsedCategories","push","categoryNum","count","getSumOfDiceWithValue","sum","forEach","calcThreeOfAKind","calcFourOfAKind","res","calcFullHouse","match","c","every","includes","calcSmallStraight","calcLargeStraight","calcYahtzee","calcChance","player","calcGameResults","switchToNextPlayer","bothPlayed","i","values","n","random","action","onSubmit","e","preventDefault","name","defaultValue","onChange","element","document","getElementById","scrollIntoView","behavior","scrollTo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5f28f369.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ActionButtonProps {\n    handleClick: () => void;\n    value: string;\n    icon: string;\n    disabled?: boolean;\n    bgSuccess?: boolean;\n}\n\nexport default function ActionButton({\n    handleClick,\n    value,\n    icon,\n    disabled,\n    bgSuccess,\n}: ActionButtonProps) {\n    return (\n        <button\n            id=\"roll_it\"\n            className={bgSuccess ? 'action-btn success-btn' : 'action-btn'}\n            onClick={handleClick}\n            disabled={disabled ?? false}\n        >\n            <span className=\"material-icons sm-14\">{icon}</span> {value}\n        </button>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/dice1.3a185ed1.jpg\";","export default __webpack_public_path__ + \"static/media/dice2.405cb56a.jpg\";","export default __webpack_public_path__ + \"static/media/dice3.263b41fb.jpg\";","export default __webpack_public_path__ + \"static/media/dice4.c00f7bac.jpg\";","export default __webpack_public_path__ + \"static/media/dice5.dd511e64.jpg\";","export default __webpack_public_path__ + \"static/media/dice6.970644d6.jpg\";","import React from 'react';\nimport D1 from '../assets/dice1.jpg';\nimport D2 from '../assets/dice2.jpg';\nimport D3 from '../assets/dice3.jpg';\nimport D4 from '../assets/dice4.jpg';\nimport D5 from '../assets/dice5.jpg';\nimport D6 from '../assets/dice6.jpg';\n\ninterface DiceProps {\n    iKey: number;\n    value: number;\n    rollCount: number;\n    pinPositions: boolean[];\n    onDiceClick: () => void;\n}\n\nexport default function Dice({\n    iKey,\n    value,\n    rollCount,\n    pinPositions,\n    onDiceClick,\n}: DiceProps) {\n    const diceIcons: string[] = [D1, D2, D3, D4, D5, D6];\n\n    return (\n        <li\n            key={iKey}\n            className={\n                !pinPositions[iKey] || rollCount > 2 ? 'dice' : 'dice pinned'\n            }\n        >\n            <button onClick={onDiceClick}>\n                <img src={diceIcons[value - 1]} alt=\"Dice\" />\n            </button>\n        </li>\n    );\n}\n","import React from 'react';\n\ninterface ModalProps {\n    show: boolean;\n    currentPlayer?: number;\n    closeModal: () => void;\n}\n\ninterface WinnerModalProps extends ModalProps {\n    results: number[];\n}\n\nexport default function Modal({ show, currentPlayer, closeModal }: ModalProps) {\n    const playerId: number = currentPlayer ? currentPlayer + 1 : 1;\n    return (\n        <>\n            {/* <!-- This example requires Tailwind CSS v2.0+ --> */}\n            {show && (\n                <div\n                    className=\"fixed z-10 inset-0 overflow-y-auto\"\n                    aria-labelledby=\"modal-title\"\n                    role=\"dialog\"\n                    aria-modal=\"true\"\n                >\n                    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n                        <div\n                            onClick={closeModal}\n                            className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n                            aria-hidden=\"true\"\n                        ></div>\n\n                        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n                        <span\n                            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n                            aria-hidden=\"true\"\n                        >\n                            &#8203;\n                        </span>\n\n                        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n                            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                                <div className=\"sm:flex sm:items-start\">\n                                    <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-center\">\n                                        <h3\n                                            className=\"text-2xl font-medium text-gray-900\"\n                                            id=\"modal-title\"\n                                        >\n                                            Player #{playerId}, please select a\n                                            category.\n                                        </h3>\n                                        <div className=\"mt-2\">\n                                            <p className=\"text-sm text-gray-500\">\n                                                P.S. Game continues until all\n                                                categories are used.\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                                <button\n                                    type=\"button\"\n                                    onClick={closeModal}\n                                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                                >\n                                    Close\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport const WinnerModal = ({\n    show,\n    closeModal,\n    results,\n}: WinnerModalProps) => {\n    const winner = results.indexOf(Math.max(...results));\n\n    return (\n        <>\n            {/* <!-- This example requires Tailwind CSS v2.0+ --> */}\n            {show && (\n                <div\n                    className=\"fixed z-10 inset-0 overflow-y-auto\"\n                    aria-labelledby=\"modal-title\"\n                    role=\"dialog\"\n                    aria-modal=\"true\"\n                >\n                    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n                        <div\n                            onClick={closeModal}\n                            className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n                            aria-hidden=\"true\"\n                        ></div>\n\n                        {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n                        <span\n                            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n                            aria-hidden=\"true\"\n                        >\n                            &#8203;\n                        </span>\n\n                        <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n                            <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                                <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-center\">\n                                    <h3\n                                        className=\"text-2xl font-medium text-gray-900\"\n                                        id=\"modal-title\"\n                                    >\n                                        Player #{winner + 1} Wins!\n                                    </h3>\n                                    <div className=\"mt-2\">\n                                        <ul className=\"px-5 text-sm text-gray-500\">\n                                            {results.map((value, key) => (\n                                                <li key={key}>\n                                                    Player #{key + 1} ({value})\n                                                    points\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                                <button\n                                    type=\"button\"\n                                    onClick={closeModal}\n                                    className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                                >\n                                    Close\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n","import React from 'react';\n\nexport default function Rules() {\n    return (\n        <div id=\"rules\" className=\"rules-wrapper\">\n            <h2 className=\"mb-5 section-title\">Rules</h2>\n            <div className=\"rules-content\">\n                <q>\n                    The game consists of a number of rounds. In each round, a\n                    player gets three rolls of the dice, although they can\n                    choose to end their turn after one or two rolls. After the\n                    first roll the player can save any dice they want and\n                    re-roll the other dice. This procedure is repeated after the\n                    second roll. The player has complete choice as to which dice\n                    to roll. It is possible to re-roll both dice that were or\n                    were not rolled before.\n                </q>{' '}\n                <br />\n                <br />\n                <p>\n                    Find full article here{' '}\n                    <a href=\"https://en.wikipedia.org/wiki/Yahtzee#Rules\">\n                        [Wiki Article]\n                    </a>\n                </p>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\n\ninterface ScoreCardProps {\n    scores: number[][];\n    categories: string[];\n    currentPlayer: number;\n}\n\nexport default function ScoreCard({\n    scores,\n    categories,\n    currentPlayer,\n}: ScoreCardProps) {\n    const [playerId, setPlayerId] = useState<number>(currentPlayer);\n    const [showLoading, setShowLoading] = useState<boolean>(false);\n    const rules: string[] = [\n        'The sum of dice with the number 1',\n        'The sum of dice with the number 2',\n        'The sum of dice with the number 3',\n        'The sum of dice with the number 4',\n        'The sum of dice with the number 5',\n        'The sum of dice with the number 6',\n        'At least three dice the same',\n        'At least four dice the same',\n        'Three of one number and two of another',\n        'Four sequential dice (1-2-3-4, 2-3-4-5, or 3-4-5-6)',\n        'Five sequential dice (1-2-3-4-5 or 2-3-4-5-6)',\n        'All five dice the same',\n        'Any combination',\n    ];\n\n    useEffect(() => {\n        setPlayerId(currentPlayer);\n    }, [currentPlayer]);\n\n    const handleTabChange = (id: number) => {\n        setPlayerId(id);\n        setShowLoading(!showLoading);\n        setTimeout(() => setShowLoading(false), 1000);\n    };\n\n    return (\n        <section id=\"scoreCard\" className=\"score-card-wrapper\">\n            <h2 className=\"mb-5 section-title\">Score-Card</h2>\n            <div className=\"container mx-auto px-4 score-container\">\n                <div className=\"justify-end flex lg:w-4/5 mx-auto mb-2 player-tabs\">\n                    {scores.map((val, key) => (\n                        <button\n                            key={key}\n                            onClick={() => handleTabChange(key)}\n                            className={\n                                'bg-gray-50 shadow-lg hover:bg-gray-200 p-2 mr-2 rounded-md transition-colors p-tab' +\n                                (playerId === key ? ' bg-yellow-200' : '')\n                            }\n                        >\n                            Player #{key + 1}\n                        </button>\n                    ))}\n                </div>\n                <div className=\"relative p-6 pb-0 lg:w-4/5 mx-auto rounded-lg score-table\">\n                    {showLoading && (\n                        <div\n                            className=\"absolute flex items-center justify-center inset-0 bg-white bg-opacity-75 transition-opacity\"\n                            aria-hidden=\"true\"\n                        >\n                            <svg\n                                className=\"animate-spin -ml-1 mr-3 h-10 w-10 text-yellow-500\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <circle\n                                    className=\"opacity-25\"\n                                    cx=\"12\"\n                                    cy=\"12\"\n                                    r=\"10\"\n                                    stroke=\"currentColor\"\n                                    strokeWidth=\"4\"\n                                ></circle>\n                                <path\n                                    className=\"opacity-75\"\n                                    fill=\"currentColor\"\n                                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                                ></path>\n                            </svg>\n                        </div>\n                    )}\n\n                    <div className=\"flex score-thead\">\n                        <div className=\"font-semibold w-3/12\">Title</div>\n                        <div className=\"font-semibold w-8/12\">Rule</div>\n                        <div className=\"font-semibold w-1/12\">Record</div>\n                    </div>\n                    <div className=\"score-tbody\">\n                        {scores[playerId].map((record, key) => (\n                            <div key={key} className=\"flex py-1 mb-1 score-tr\">\n                                <div className=\"w-3/12\">{categories[key]}</div>\n                                <div className=\"w-8/12\">{rules[key]}</div>\n                                <div className=\"w-1/12\">{record}</div>\n                            </div>\n                        ))}\n                        <div className=\"flex py-2 mb-2 score-tr\">\n                            <div className=\"w-10/12\"></div>\n                            <div className=\"bg-yellow-200 text-center shadow-lg rounded-md p-2 text-lg w-2/12\">\n                                Sum:{' '}\n                                {scores[playerId].reduce(\n                                    (acc, curr) => (acc += curr)\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n}\n","export const getSumOfDiceWithValue = (\n    categoryNum: number,\n    dices: number[]\n): number => {\n    let count = 0;\n    dices.map((dice) => dice === categoryNum && count++);\n    return count > 2 ? count * categoryNum : 0;\n};\n\nconst getSumOfAllDices = (dices: number[]) => {\n    return dices.reduce((acc, curr) => (acc += curr));\n};\n\nexport const checkIfRepeatCountAchieved = (\n    dices: number[],\n    value: number,\n    repeats: number\n): boolean => {\n    //\n    return dices.filter((dice) => dice === value).length >= repeats;\n};\n\nexport const calcThreeOfAKind = (dices: number[]): number => {\n    let sum = 0;\n    dices.forEach((dice) => {\n        if (checkIfRepeatCountAchieved(dices, dice, 3)) {\n            sum = getSumOfAllDices(dices);\n        }\n    });\n    return sum;\n};\n\nexport const calcFourOfAKind = (dices: number[]): number => {\n    let sum = 0;\n    dices.forEach((dice) => {\n        if (checkIfRepeatCountAchieved(dices, dice, 4)) {\n            sum = getSumOfAllDices(dices);\n        }\n    });\n    return sum;\n};\n\nexport const calcFullHouse = (dices: number[]): number => {\n    let res = 0;\n    let tmp = dices.filter((dice) => dice !== dices[0]);\n    tmp.forEach((dice) => {\n        if (checkIfRepeatCountAchieved(dices, dice, tmp.length)) {\n            res = 25;\n        }\n    });\n\n    return res;\n};\n\nexport const calcSmallStraight = (dices: number[]): number => {\n    let match: boolean = false;\n    const combinations = [\n        [1, 2, 3, 4],\n        [2, 3, 4, 5],\n        [3, 4, 5, 6],\n    ];\n\n    combinations.forEach(\n        (c) => c.every((val) => dices.includes(val)) && (match = true)\n    );\n\n    return match ? 30 : 0;\n};\n\nexport const calcLargeStraight = (dices: number[]): number => {\n    let match: boolean = false;\n    const combinations = [\n        [1, 2, 3, 4, 5],\n        [2, 3, 4, 5, 6],\n    ];\n\n    combinations.forEach(\n        (c) => c.every((val) => dices.includes(val)) && (match = true)\n    );\n\n    return match ? 40 : 0;\n};\n\nexport const calcYahtzee = (dices: number[]) => {\n    let tmp = dices.filter((dice) => dice !== dices[0]);\n\n    return !tmp.length ? 50 : 0;\n};\n\nexport const calcChance = (dices: number[]) => {\n    return getSumOfAllDices(dices);\n};\n\nexport const calcGameResults = (scores: number[][]) => {\n    return scores.map((player) => getSumOfAllDices(player));\n};\n\nexport const getWinnerId = (results: number[]) => {\n    return results.indexOf(Math.max(...results));\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport ActionButton from './components/ActionButton';\nimport Dice from './components/Dice';\nimport Modal, { WinnerModal } from './components/Modal';\nimport Rules from './components/Rules';\nimport ScoreCard from './components/ScoreCard';\nimport {\n    calcChance,\n    calcFourOfAKind,\n    calcFullHouse,\n    calcGameResults,\n    calcLargeStraight,\n    calcSmallStraight,\n    calcThreeOfAKind,\n    calcYahtzee,\n    getSumOfDiceWithValue,\n    getWinnerId,\n} from './helpers/CheckResults';\nimport { scrollTo } from './helpers/Scroll';\n\nfunction App() {\n    const [pause, setPause] = useState<boolean>(false);\n    const [results, setResults] = useState<number[]>([]);\n    const [rollCount, setRollCount] = useState<number>(0);\n    const [showModal, setShowModal] = useState<boolean>(false);\n    const [dices, setDices] = useState<number[]>([1, 1, 1, 1, 1]);\n    const [currentPlayer, setCurrentPlayer] = useState<number>(0);\n    const [usedCategories, setUsedCategories] = useState<number[][]>([[], []]);\n    const [showWinnerModal, setShowWinnerModal] = useState<boolean>(false);\n    const [scores, setScores] = useState([\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ]);\n\n    const [pinPositions, setPinPositions] = useState<boolean[]>([\n        false,\n        false,\n        false,\n        false,\n        false,\n    ]);\n\n    const categoryTitles = [\n        'Aces',\n        'Twos',\n        'Threes',\n        'Fours',\n        'Fives',\n        'Sixes',\n        '3 of kind',\n        '4 of kind',\n        'Full House',\n        'Small Straight',\n        'Large Straight',\n        'Yahtzee',\n        'Chance',\n    ];\n\n    const rollDices = () => {\n        const values: number[] = [];\n        let n = 0;\n\n        while (n < 5) {\n            let random = Math.random() * 6 + 1;\n            // if this dice already pinned, passing same value\n            pinPositions[n] ? values.push(dices[n]) : values.push(random | 0);\n            n++;\n        }\n\n        setDices(values);\n        setRollCount(rollCount + 1);\n\n        if (rollCount === 2) {\n            setPause(!pause);\n            setShowModal(!showModal);\n        }\n    };\n\n    const pinDicePosition = (id: number) => {\n        if (rollCount === 0) return;\n        setPinPositions(\n            pinPositions.map((val, i) => {\n                if (i !== id) {\n                    return val;\n                }\n\n                return !val;\n            })\n        );\n    };\n\n    const resetPinnedPositions = () => {\n        setPinPositions([false, false, false, false, false]);\n    };\n\n    const switchToNextRound = () => {\n        setRollCount(0);\n        setPause(!pause);\n        resetPinnedPositions();\n    };\n\n    const handleCategorySelect = (target: any) => {\n        let tmp = scores;\n        let categoryNr = ~~target.value;\n        let tmpUsedCategories = usedCategories;\n        tmpUsedCategories[currentPlayer].push(categoryNr);\n        setUsedCategories(tmpUsedCategories);\n\n        // Upper section\n        if (categoryNr < 6) {\n            tmp[currentPlayer][categoryNr] = getSumOfDiceWithValue(\n                categoryNr + 1,\n                dices\n            );\n        }\n\n        // Lower seection\n        if (categoryNr === 6) {\n            tmp[currentPlayer][categoryNr] = calcThreeOfAKind(dices);\n        }\n\n        if (categoryNr === 7) {\n            tmp[currentPlayer][categoryNr] = calcFourOfAKind(dices);\n        }\n\n        if (categoryNr === 8) {\n            tmp[currentPlayer][categoryNr] = calcFullHouse(dices);\n        }\n\n        if (categoryNr === 9) {\n            tmp[currentPlayer][categoryNr] = calcSmallStraight(dices);\n        }\n\n        if (categoryNr === 10) {\n            tmp[currentPlayer][categoryNr] = calcLargeStraight(dices);\n        }\n\n        if (categoryNr === 11) {\n            tmp[currentPlayer][categoryNr] = calcYahtzee(dices);\n        }\n\n        if (categoryNr === 12) {\n            tmp[currentPlayer][categoryNr] = calcChance(dices);\n        }\n\n        // Check Player wins\n        if (\n            tmp[currentPlayer].length === usedCategories[currentPlayer].length\n        ) {\n            setResults(calcGameResults(tmp));\n            setShowWinnerModal(!showWinnerModal);\n        }\n\n        setScores(tmp);\n        switchToNextPlayer();\n    };\n\n    const switchToNextPlayer = () => {\n        let bothPlayed = currentPlayer + 1 < scores.length;\n        setCurrentPlayer(bothPlayed ? currentPlayer + 1 : 0);\n        switchToNextRound();\n    };\n\n    return (\n        <div id=\"game\" className=\"App\">\n            <div className=\"app-bg\">\n                <h1 className=\"logo\">\n                    Yahtzee <small className=\"text-sm\">Demo</small>\n                </h1>\n\n                <div className=\"game\">\n                    {results.length ? (\n                        <>\n                            <h3 className=\"text-6xl text-center font-medium\">\n                                Game Over\n                            </h3>\n                            <p className=\"text-3xl text-center\">\n                                Player #{getWinnerId(results) + 1} Wins!\n                            </p>\n                        </>\n                    ) : (\n                        <>\n                            <h3 className=\"text-center text-2xl\">\n                                <b>Player #{currentPlayer + 1}</b> plays.\n                            </h3>\n                            <div className=\"dices-wrapper\">\n                                <ul className=\"dices-list\">\n                                    {dices.map((dice, i) => (\n                                        <Dice\n                                            key={i}\n                                            iKey={i}\n                                            value={dice}\n                                            rollCount={rollCount}\n                                            pinPositions={pinPositions}\n                                            onDiceClick={() =>\n                                                pinDicePosition(i)\n                                            }\n                                        />\n                                    ))}\n                                </ul>\n                                <small className=\"rollCount\">\n                                    {rollCount < 3\n                                        ? `Only ${3 - rollCount} roll/-s left.`\n                                        : \"You've exceeded rolls count. Select category to continue.\"}\n                                </small>\n                            </div>\n                            <div className=\"roll-wrapper\">\n                                <ActionButton\n                                    handleClick={rollDices}\n                                    value=\"Roll It!\"\n                                    icon=\"casino\"\n                                    disabled={pause || rollCount > 2}\n                                    bgSuccess={true}\n                                />\n                                <form\n                                    action=\"#\"\n                                    className=\"mr-2 score-card-form\"\n                                    onSubmit={(e) => e.preventDefault()}\n                                >\n                                    <select\n                                        name=\"categories\"\n                                        id=\"categories\"\n                                        disabled={!pause}\n                                        defaultValue=\"not_selected\"\n                                        onChange={(e) =>\n                                            handleCategorySelect(e.target)\n                                        }\n                                        className=\"p-2 rounded-md categories-select\"\n                                    >\n                                        <option\n                                            key=\"not_selected\"\n                                            value=\"not_selected\"\n                                            className=\"category-title\"\n                                        >\n                                            -- Select Category\n                                        </option>\n                                        {categoryTitles.map(\n                                            (value, key) =>\n                                                !usedCategories[\n                                                    currentPlayer\n                                                ].includes(key) && (\n                                                    <option\n                                                        key={key}\n                                                        value={key}\n                                                        className=\"category-title\"\n                                                    >\n                                                        {value}\n                                                    </option>\n                                                )\n                                        )}\n                                    </select>\n                                </form>\n                                <ActionButton\n                                    handleClick={switchToNextPlayer}\n                                    value=\"Skip\"\n                                    icon=\"keyboard_double_arrow_right\"\n                                    disabled={!pause}\n                                />\n                            </div>\n                            <h4 className=\"hints\">\n                                Click on dice to pin it for the next roll.\n                                <span className=\"or\">or</span>\n                                Pick which category you want to add in your\n                                score-card. Select category carefully, there is\n                                no way to change decision.\n                            </h4>\n                            <div className=\"scroll-to-wrapper\">\n                                <button\n                                    className=\"scroll-to-btn\"\n                                    onClick={() => scrollTo('scoreCard')}\n                                >\n                                    <span className=\"material-icons md-24\">\n                                        south\n                                    </span>\n                                </button>\n                            </div>\n                        </>\n                    )}\n                </div>\n            </div>\n            {/*  */}\n            <ScoreCard\n                scores={scores}\n                categories={categoryTitles}\n                currentPlayer={currentPlayer}\n            />\n            {/*  */}\n            <Rules />\n            {/* */}\n            <Modal\n                show={showModal}\n                currentPlayer={currentPlayer}\n                closeModal={() => setShowModal(!showModal)}\n            />\n            {/*  */}\n            <WinnerModal\n                results={results}\n                show={showWinnerModal}\n                closeModal={() => setShowWinnerModal(!showWinnerModal)}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","export const scrollTo = (id: string) => {\n    let element = document.getElementById(id);\n\n    element?.scrollIntoView({ behavior: 'smooth' });\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}